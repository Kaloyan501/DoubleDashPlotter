name: .NET Build & Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]

    env:
      Solution_Name: DoubleDashPlotter.sln
      Test_Project_Path: DoubleDashPlotter/DoubleDashPlotter.csproj
      Wap_Project_Directory: DoubleDashPlotter
      Wap_Project_Path: DoubleDashPlotter.Package.wapproj

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true  # Enables NuGet package caching

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Ensure `packages.lock.json` is enabled
        run: |
          echo '<Project><PropertyGroup><RestorePackagesWithLockFile>true</RestorePackagesWithLockFile></PropertyGroup></Project>' > Directory.Build.props

      - name: Restore Dependencies
        run: dotnet restore $env:Solution_Name --force
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Verify `packages.lock.json` exists
        run: |
          if (!(Test-Path -Path "packages.lock.json" -PathType Leaf)) {
            Write-Error "packages.lock.json is missing. Ensure that 'RestorePackagesWithLockFile' is enabled."
            exit 1
          }

      - name: Build the Solution
        run: dotnet build $env:Solution_Name --configuration $env:Configuration --no-restore
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Run Unit Tests
        run: dotnet test $env:Test_Project_Path --configuration $env:Configuration --no-build --verbosity normal
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Decode the PFX
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
          $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

      - name: Create the App Package
        run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
        env:
          Appx_Bundle: Always
          Appx_Bundle_Platforms: x86|x64
          Appx_Package_Build_Mode: StoreUpload
          Configuration: ${{ matrix.configuration }}

      - name: Remove the PFX
        run: Remove-Item -Path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MSIX Package
          path: ${{ env.Wap_Project_Directory }}\AppPackages
