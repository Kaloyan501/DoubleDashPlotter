name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Enables a "Run workflow" button in GitHub Actions

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # See available runner types here: https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: DoubleDashPlotter.sln                         # Replace with your solution name, e.g., MyWpfApp.sln.
      Test_Project_Path: DoubleDashPlotter/DoubleDashPlotter.csproj   # Replace with the path to your test project.
      Wap_Project_Directory: DoubleDashPlotter         # Replace with your WAP project directory relative to the solution.
      Wap_Project_Path: DoubleDashPlotter.Package.wapproj                    # Replace with the path to your WAP project, e.g., MyWpfApp.Package.wapproj.

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install the .NET Core SDK
      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true  # Enable caching for NuGet packages

      # Add MSBuild to the PATH
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore $env:Solution_Name --configfile nuget.config
        env:
          Configuration: ${{ matrix.configuration }}

      # Execute all unit tests in the solution
      - name: Execute unit tests
        run: dotnet test $env:Test_Project_Path --configuration $env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      # Decode the base64 encoded PFX and save the signing certificate
      - name: Decode the PFX
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
          $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

      # Create the app package by building and packaging the Windows Application Packaging project
      - name: Create the app package
        run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
        env:
          Appx_Bundle: Always
          Appx_Bundle_Platforms: x86|x64
          Appx_Package_Build_Mode: StoreUpload
          Configuration: ${{ matrix.configuration }}

      # Remove the PFX file
      - name: Remove the PFX
        run: Remove-Item -Path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

      # Upload the MSIX package artifact
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MSIX Package
          path: ${{ env.Wap_Project_Directory }}\AppPackages
